spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  data:
    mongodb:
      uri: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:27017/?ssl=false&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false&connectTimeoutMS=60000&socketTimeoutMS=60000&serverSelectionTimeoutMS=60000
      database: ${MONGO_NAME}
    redis:
      protocol: ${REDIS_PROTOCOL}
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      database: 0

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${OAUTH_JWKS_URI}

  kafka:
    bootstrap-servers: ${KAFKA_URL}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      enable-idempotence: true
      retries: 2
      acks: all
      properties:
        max.in.flight.requests.per.connection: 3
        min.insync.replicas: 2
    admin:
      auto-create: true
    properties:
      request.timeout.ms: 60000
      session.timeout.ms: 60000
      heartbeat.interval.ms: 20000
jwt:
  audience: ${AUTH_INTERNAL_AUDIENCE}

discord:
  webhook:
    url: ${DISCORD_URL}

order:
  service:
    url: ${ORDER_SVC_URI}

review:
  service:
    url: ${REVIEW_SVC_URI}

user:
  service:
    url: ${USER_SVC_URI}